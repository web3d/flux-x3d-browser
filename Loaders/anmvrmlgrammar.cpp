
/*  A Bison parser, made from anmvrmlgrammar.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IS	258
#define	DEF	259
#define	USE	260
#define	ROUTE	261
#define	TO	262
#define	TRUE_TOKEN	263
#define	FALSE_TOKEN	264
#define	NULL_TOKEN	265
#define	PROTO	266
#define	EXTERNPROTO	267
#define	PROFILE	268
#define	COMPONENT	269
#define	IMPORT_TOKEN	270
#define	EXPORT_TOKEN	271
#define	AS	272
#define	META	273
#define	Script	274
#define	Field	275
#define	ExposedField	276
#define	EventIn	277
#define	EventOut	278
#define	ShaderProgram	279
#define	INTEGER_TOKEN	280
#define	DOUBLE_TOKEN	281
#define	STRING_TOKEN	282
#define	IDENTIFIER	283
#define	BOOLEAN_ATTRIBUTE	284
#define	COLOR_ATTRIBUTE	285
#define	COLORARRAY_ATTRIBUTE	286
#define	DOUBLE_ATTRIBUTE	287
#define	DOUBLEARRAY_ATTRIBUTE	288
#define	FLOAT_ATTRIBUTE	289
#define	FLOATARRAY_ATTRIBUTE	290
#define	IMAGE_ATTRIBUTE	291
#define	INTEGER_ATTRIBUTE	292
#define	INTEGERARRAY_ATTRIBUTE	293
#define	NODE_ATTRIBUTE	294
#define	NODEARRAY_ATTRIBUTE	295
#define	ROTATION_ATTRIBUTE	296
#define	ROTATIONARRAY_ATTRIBUTE	297
#define	STRING_ATTRIBUTE	298
#define	STRINGARRAY_ATTRIBUTE	299
#define	TIME_ATTRIBUTE	300
#define	TIMEARRAY_ATTRIBUTE	301
#define	POINT2_ATTRIBUTE	302
#define	POINT2ARRAY_ATTRIBUTE	303
#define	POINT3_ATTRIBUTE	304
#define	POINT3ARRAY_ATTRIBUTE	305
#define	Boolean_Type	306
#define	BooleanArray_Type	307
#define	Color_Type	308
#define	ColorArray_Type	309
#define	Double_Type	310
#define	DoubleArray_Type	311
#define	Float_Type	312
#define	FloatArray_Type	313
#define	Image_Type	314
#define	ImageArray_Type	315
#define	Integer_Type	316
#define	IntegerArray_Type	317
#define	Node_Type	318
#define	NodeArray_Type	319
#define	Rotation_Type	320
#define	RotationArray_Type	321
#define	String_Type	322
#define	StringArray_Type	323
#define	Time_Type	324
#define	TimeArray_Type	325
#define	Point2_Type	326
#define	Point2Array_Type	327
#define	Point3_Type	328
#define	Point3Array_Type	329


#include "stdafx.h"
#include "anmvrml97reader.h"
#include "anmsymbol.h"

#define yyerror(message) Yyerror(message)
#define yylex() Yylex()
#define yyparse() CAnmVRML97Reader::Yyparse()
#define yylval m_Yylval
#define yyval m_Yyval
#define pcyytoken m_Pcyytoken
#define pcyyerrfl m_Pcyyerrfl
#define pcyyerrct m_Pcyyerrct
#define yyv m_Yyv

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		497
#define	YYFLAG		-32768
#define	YYNTBASE	81

#define YYTRANSLATE(x) ((unsigned)(x) <= 329 ? yytranslate[x] : 192)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,    29,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    30,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    27,     2,    28,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    25,     2,    26,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     7,    10,    11,    12,    15,    20,    23,    24,
    27,    31,    33,    37,    38,    41,    42,    45,    47,    49,
    51,    53,    55,    56,    57,    58,    70,    71,    72,    81,
    82,    85,    86,    89,    91,    93,    95,    97,    98,   101,
   103,   105,   107,   109,   111,   114,   116,   117,   121,   122,
   126,   127,   133,   134,   137,   139,   141,   143,   146,   148,
   149,   155,   156,   159,   161,   163,   165,   166,   170,   172,
   174,   176,   178,   180,   182,   184,   186,   188,   190,   192,
   194,   197,   199,   200,   206,   207,   210,   212,   214,   216,
   217,   221,   223,   225,   227,   229,   231,   233,   235,   237,
   239,   241,   243,   244,   248,   250,   252,   254,   256,   258,
   260,   262,   264,   266,   268,   270,   272,   274,   276,   278,
   280,   282,   284,   286,   288,   290,   292,   294,   296,   298,
   300,   302,   304,   306,   308,   310,   312,   314,   316,   320,
   325,   329,   333,   338,   343,   347,   351,   356,   361,   365,
   369,   374,   379,   383,   388,   392,   396,   401,   406,   410,
   414,   419,   424,   428,   432,   437,   442,   446,   450,   455,
   460,   464,   468,   473,   478,   482,   486,   491,   496,   500,
   504,   509,   514,   518,   522,   527,   532,   534,   536,   538,
   542,   546,   550,   553,   556,   559,   562,   565,   568,   571,
   574,   577,   580,   583,   586,   589,   592,   595,   598,   601,
   604,   607,   610,   613,   616,   619,   621,   623,   625,   627,
   629,   631,   633,   635,   637,   639,   641,   643,   645,   647,
   649,   651,   653,   655,   657,   659,   661,   663,   665,   667,
   669,   671,   673,   675,   677,   679,   683,   685,   687,   691,
   693,   696,   698,   700,   702,   706,   708,   711,   716,   717,
   720,   722,   724,   726,   730,   732,   735,   737,   739,   741,
   743,   747,   749,   752,   755,   757,   759,   763,   765,   768,
   772,   774,   776,   780,   782,   785,   790,   792,   794,   798,
   800,   803,   805,   807,   809,   813,   815,   818,   819,   824,
   825,   832,   836,   842,   846,   852,   853,   856,   857,   858,
   859,   860,   873,   878,   885,   888,   893,   896,   898
};

static const short yyrhs[] = {    82,
     0,    83,    84,    86,    88,     0,    13,    34,     0,     0,
     0,    84,    85,     0,    14,    34,    30,    31,     0,    14,
    34,     0,     0,    86,    87,     0,    18,    33,    33,     0,
    91,     0,    90,   103,    91,     0,     0,    90,    93,     0,
     0,    91,    92,     0,    93,     0,   103,     0,   183,     0,
   188,     0,   189,     0,     0,     0,     0,    11,    94,    34,
    95,    27,    99,    28,    96,    25,    89,    26,     0,     0,
     0,    12,    97,    34,    98,    27,   100,    28,   177,     0,
     0,    99,   101,     0,     0,   100,   102,     0,   182,     0,
   129,     0,   182,     0,   179,     0,     0,     0,   103,     0,
   104,     0,   113,     0,   121,     0,   183,     0,   105,     0,
   107,   109,     0,   109,     0,     0,     5,   106,    34,     0,
     0,     4,   108,    34,     0,     0,    34,   110,    25,   111,
    26,     0,     0,   111,   112,     0,   148,     0,   183,     0,
    93,     0,   107,   114,     0,   114,     0,     0,    19,   115,
    25,   116,    26,     0,     0,   116,   117,     0,   118,     0,
   182,     0,   148,     0,     0,   131,   119,   120,     0,   134,
     0,   135,     0,   136,     0,   137,     0,   138,     0,   139,
     0,   146,     0,   141,     0,   142,     0,   143,     0,   144,
     0,   145,     0,   107,   122,     0,   122,     0,     0,    24,
   123,    25,   124,    26,     0,     0,   124,   125,     0,   126,
     0,   182,     0,   148,     0,     0,    20,   127,   128,     0,
   134,     0,   135,     0,   137,     0,   138,     0,   139,     0,
   146,     0,   141,     0,   142,     0,   143,     0,   144,     0,
   145,     0,     0,   131,   130,   133,     0,    20,     0,    21,
     0,    57,     0,    59,     0,    60,     0,    63,     0,    64,
     0,    65,     0,    67,     0,    68,     0,    69,     0,    70,
     0,    71,     0,    72,     0,    73,     0,    74,     0,    75,
     0,    76,     0,    77,     0,    78,     0,    79,     0,    80,
     0,   134,     0,   135,     0,   136,     0,   137,     0,   138,
     0,   139,     0,   140,     0,   141,     0,   142,     0,   143,
     0,   144,     0,   145,     0,    57,    34,   152,     0,    57,
    34,     3,   147,     0,    59,    34,   153,     0,    60,    34,
   154,     0,    59,    34,     3,   147,     0,    60,    34,     3,
   147,     0,    61,    34,   156,     0,    62,    34,   157,     0,
    61,    34,     3,   147,     0,    62,    34,     3,   147,     0,
    63,    34,   156,     0,    64,    34,   157,     0,    63,    34,
     3,   147,     0,    64,    34,     3,   147,     0,    65,    34,
   159,     0,    65,    34,     3,   147,     0,    67,    34,   161,
     0,    68,    34,   162,     0,    67,    34,     3,   147,     0,
    68,    34,     3,   147,     0,    69,    34,   164,     0,    70,
    34,   165,     0,    69,    34,     3,   147,     0,    70,    34,
     3,   147,     0,    71,    34,   173,     0,    72,    34,   174,
     0,    71,    34,     3,   147,     0,    72,    34,     3,   147,
     0,    73,    34,   176,     0,    74,    34,   177,     0,    73,
    34,     3,   147,     0,    74,    34,     3,   147,     0,    75,
    34,   156,     0,    76,    34,   157,     0,    75,    34,     3,
   147,     0,    76,    34,     3,   147,     0,    77,    34,   167,
     0,    78,    34,   168,     0,    77,    34,     3,   147,     0,
    78,    34,     3,   147,     0,    79,    34,   170,     0,    80,
    34,   171,     0,    79,    34,     3,   147,     0,    80,    34,
     3,   147,     0,    69,    34,   164,     0,    70,    34,   165,
     0,    69,    34,     3,   147,     0,    70,    34,     3,   147,
     0,    34,     0,   150,     0,   149,     0,    34,     3,    34,
     0,   150,     3,    34,     0,   150,     3,   150,     0,    35,
   152,     0,    36,   153,     0,    37,   154,     0,    38,   156,
     0,    39,   157,     0,    40,   156,     0,    41,   157,     0,
    42,   159,     0,    43,   161,     0,    44,   162,     0,    45,
   164,     0,    46,   165,     0,    47,   173,     0,    48,   174,
     0,    49,   176,     0,    50,   177,     0,    51,   156,     0,
    52,   157,     0,    53,   167,     0,    54,   168,     0,    55,
   170,     0,    56,   171,     0,    34,   151,     0,    35,     0,
    36,     0,    37,     0,    38,     0,    39,     0,    40,     0,
    41,     0,    42,     0,    43,     0,    44,     0,    45,     0,
    46,     0,    47,     0,    48,     0,    49,     0,    50,     0,
    51,     0,    52,     0,    53,     0,    54,     0,    55,     0,
    56,     0,   152,     0,   157,     0,   159,     0,   162,     0,
   165,     0,   177,     0,     8,     0,     9,     0,   191,   191,
   191,     0,   153,     0,   190,     0,    27,   155,    28,     0,
   191,     0,   155,   191,     0,   191,     0,   156,     0,   190,
     0,    27,   158,    28,     0,   191,     0,   158,   191,     0,
   161,   161,   161,   160,     0,     0,   160,   161,     0,    31,
     0,   161,     0,   190,     0,    27,   163,    28,     0,   161,
     0,   163,   161,     0,   103,     0,    10,     0,   164,     0,
   190,     0,    27,   166,    28,     0,   164,     0,   166,   164,
     0,   191,   191,     0,   167,     0,   190,     0,    27,   169,
    28,     0,   191,     0,   169,   191,     0,   191,   191,   191,
     0,   170,     0,   190,     0,    27,   172,    28,     0,   191,
     0,   172,   191,     0,   191,   191,   191,   191,     0,   173,
     0,   190,     0,    27,   175,    28,     0,   191,     0,   175,
   191,     0,    33,     0,   176,     0,   190,     0,    27,   178,
    28,     0,   176,     0,   178,   176,     0,     0,   131,   180,
   132,    34,     0,     0,   131,   181,   132,    34,     3,    34,
     0,    22,   132,    34,     0,    22,   132,    34,     3,    34,
     0,    23,   132,    34,     0,    23,   132,    34,     3,    34,
     0,     0,     0,   183,     0,     0,     0,     0,     0,     6,
   184,    34,   185,    29,    34,     7,   186,    34,   187,    29,
    34,     0,    15,    34,    29,    34,     0,    15,    34,    29,
    34,    17,    34,     0,    16,    34,     0,    16,    34,    17,
    34,     0,    27,    28,     0,    31,     0,    32,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   118,   124,   132,   133,   137,   138,   142,   143,   147,   148,
   152,   157,   162,   166,   167,   172,   173,   177,   178,   179,
   180,   181,   187,   192,   196,   199,   203,   208,   212,   219,
   220,   224,   225,   229,   230,   234,   235,   241,   242,   246,
   247,   248,   249,   253,   254,   255,   259,   263,   269,   273,
   279,   283,   291,   292,   296,   297,   298,   303,   304,   308,
   312,   319,   320,   324,   325,   326,   331,   336,   340,   341,
   342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
   357,   358,   362,   366,   373,   374,   378,   379,   380,   384,
   389,   392,   393,   394,   395,   396,   397,   398,   399,   400,
   401,   402,   410,   415,   421,   422,   427,   428,   429,   430,
   431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
   441,   442,   443,   444,   445,   446,   450,   451,   452,   453,
   454,   455,   456,   457,   458,   459,   460,   461,   465,   469,
   476,   480,   484,   488,   495,   499,   503,   507,   514,   518,
   522,   526,   533,   537,   544,   548,   552,   556,   563,   567,
   571,   575,   582,   586,   590,   594,   601,   605,   609,   613,
   620,   624,   628,   632,   639,   643,   647,   651,   658,   662,
   666,   670,   677,   681,   685,   689,   696,   701,   710,   711,
   715,   719,   727,   731,   735,   739,   743,   747,   751,   755,
   759,   763,   767,   771,   775,   779,   783,   787,   791,   795,
   799,   803,   807,   811,   815,   822,   823,   824,   825,   826,
   827,   828,   829,   830,   831,   832,   833,   834,   835,   836,
   837,   838,   839,   840,   841,   842,   843,   847,   848,   849,
   850,   851,   852,   856,   861,   869,   879,   880,   881,   885,
   889,   896,   904,   905,   906,   910,   914,   921,   925,   926,
   930,   938,   939,   940,   944,   945,   949,   953,   960,   961,
   962,   966,   967,   971,   980,   981,   982,   986,   990,   997,
  1007,  1008,  1009,  1013,  1017,  1024,  1035,  1036,  1037,  1041,
  1045,  1052,  1060,  1061,  1062,  1066,  1067,  1071,  1075,  1079,
  1083,  1091,  1095,  1099,  1103,  1111,  1112,  1116,  1120,  1122,
  1126,  1128,  1137,  1138,  1142,  1143,  1149,  1153,  1154
};

static const char * const yytname[] = {   "$","error","$undefined.","IS","DEF",
"USE","ROUTE","TO","TRUE_TOKEN","FALSE_TOKEN","NULL_TOKEN","PROTO","EXTERNPROTO",
"PROFILE","COMPONENT","IMPORT_TOKEN","EXPORT_TOKEN","AS","META","Script","Field",
"ExposedField","EventIn","EventOut","ShaderProgram","'{'","'}'","'['","']'",
"'.'","':'","INTEGER_TOKEN","DOUBLE_TOKEN","STRING_TOKEN","IDENTIFIER","BOOLEAN_ATTRIBUTE",
"COLOR_ATTRIBUTE","COLORARRAY_ATTRIBUTE","DOUBLE_ATTRIBUTE","DOUBLEARRAY_ATTRIBUTE",
"FLOAT_ATTRIBUTE","FLOATARRAY_ATTRIBUTE","IMAGE_ATTRIBUTE","INTEGER_ATTRIBUTE",
"INTEGERARRAY_ATTRIBUTE","NODE_ATTRIBUTE","NODEARRAY_ATTRIBUTE","ROTATION_ATTRIBUTE",
"ROTATIONARRAY_ATTRIBUTE","STRING_ATTRIBUTE","STRINGARRAY_ATTRIBUTE","TIME_ATTRIBUTE",
"TIMEARRAY_ATTRIBUTE","POINT2_ATTRIBUTE","POINT2ARRAY_ATTRIBUTE","POINT3_ATTRIBUTE",
"POINT3ARRAY_ATTRIBUTE","Boolean_Type","BooleanArray_Type","Color_Type","ColorArray_Type",
"Double_Type","DoubleArray_Type","Float_Type","FloatArray_Type","Image_Type",
"ImageArray_Type","Integer_Type","IntegerArray_Type","Node_Type","NodeArray_Type",
"Rotation_Type","RotationArray_Type","String_Type","StringArray_Type","Time_Type",
"TimeArray_Type","Point2_Type","Point2Array_Type","Point3_Type","Point3Array_Type",
"world","scene","profile","components","component","metas","meta","scene_contents",
"proto_body","prototypes","declarations","declaration","prototype","@1","@2",
"@3","@4","@5","proto_declarations","extern_proto_declarations","proto_declaration",
"extern_proto_declaration","node","node_instance","use_clause","@6","def_clause",
"@7","node_definition","@8","node_definition_contents","node_definition_onemember",
"script","script_definition","@9","script_declarations","script_declaration",
"script_field_declaration","@10","script_field_defaults","shader","shader_definition",
"@11","shader_declarations","shader_declaration","shader_field_declaration",
"@12","shader_field_defaults","field_declaration","@13","field_access","field_type",
"field_defaults","boolean_defaults","color_defaults","double_defaults","float_defaults",
"image_defaults","integer_defaults","node_defaults","rotation_defaults","string_defaults",
"time_defaults","point2_defaults","point3_defaults","script_node_defaults","identifier_or_field",
"field","field_value","any_field_type","any_value","boolean_value","color_value",
"color_values","many_color_values","float_value","float_values","many_float_values",
"image_value","integer_star","integer_value","integer_values","many_integer_values",
"node_value","node_values","many_node_values","point2_value","point2_values",
"many_point2_values","point3_value","point3_values","many_point3_values","rotation_value",
"rotation_values","many_rotation_values","string_value","string_values","many_string_values",
"extern_field_declaration","@14","@15","event_declaration","route","@16","@17",
"@18","@19","import","export","empty_array","numeric_value","empty_array"
};
#endif

static const short yyr1[] = {     0,
    81,    82,    83,    83,    84,    84,    85,    85,    86,    86,
    87,    88,    89,    90,    90,    91,    91,    92,    92,    92,
    92,    92,    94,    95,    96,    93,    97,    98,    93,    99,
    99,   100,   100,   101,   101,   102,   102,    -1,    -1,   103,
   103,   103,   103,   104,   104,   104,   106,   105,   108,   107,
   110,   109,   111,   111,   112,   112,   112,   113,   113,   115,
   114,   116,   116,   117,   117,   117,   119,   118,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   121,   121,   123,   122,   124,   124,   125,   125,   125,   127,
   126,   128,   128,   128,   128,   128,   128,   128,   128,   128,
   128,   128,   130,   129,   131,   131,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   134,   134,
   135,   135,   135,   135,   136,   136,   136,   136,   137,   137,
   137,   137,   138,   138,   139,   139,   139,   139,   140,   140,
   140,   140,   141,   141,   141,   141,   142,   142,   142,   142,
   143,   143,   143,   143,   144,   144,   144,   144,   145,   145,
   145,   145,   146,   146,   146,   146,   147,   147,   148,   148,
   148,   148,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   151,   151,   151,
   151,   151,   151,   152,   152,   153,   154,   154,   154,   155,
   155,   156,   157,   157,   157,   158,   158,   159,   160,   160,
   161,   162,   162,   162,   163,   163,   164,   164,   165,   165,
   165,   166,   166,   167,   168,   168,   168,   169,   169,   170,
   171,   171,   171,   172,   172,   173,   174,   174,   174,   175,
   175,   176,   177,   177,   177,   178,   178,   180,   179,   181,
   179,   182,   182,   182,   182,    -1,    -1,   184,   185,   186,
   187,   183,   188,   188,   189,   189,   190,   191,   191
};

static const short yyr2[] = {     0,
     1,     4,     2,     0,     0,     2,     4,     2,     0,     2,
     3,     1,     3,     0,     2,     0,     2,     1,     1,     1,
     1,     1,     0,     0,     0,    11,     0,     0,     8,     0,
     2,     0,     2,     1,     1,     1,     1,     0,     2,     1,
     1,     1,     1,     1,     2,     1,     0,     3,     0,     3,
     0,     5,     0,     2,     1,     1,     1,     2,     1,     0,
     5,     0,     2,     1,     1,     1,     0,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     1,     0,     5,     0,     2,     1,     1,     1,     0,
     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     0,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     3,     4,
     3,     3,     4,     4,     3,     3,     4,     4,     3,     3,
     4,     4,     3,     4,     3,     3,     4,     4,     3,     3,
     4,     4,     3,     3,     4,     4,     3,     3,     4,     4,
     3,     3,     4,     4,     3,     3,     4,     4,     3,     3,
     4,     4,     3,     3,     4,     4,     1,     1,     1,     3,
     3,     3,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     3,     1,     1,     3,     1,
     2,     1,     1,     1,     3,     1,     2,     4,     0,     2,
     1,     1,     1,     3,     1,     2,     1,     1,     1,     1,
     3,     1,     2,     2,     1,     1,     3,     1,     2,     3,
     1,     1,     3,     1,     2,     4,     1,     1,     3,     1,
     2,     1,     1,     1,     3,     1,     2,     0,     4,     0,
     6,     3,     5,     3,     5,     0,     2,     0,     0,     0,
     0,    12,     4,     6,     2,     4,     2,     1,     1
};

static const short yydefact[] = {     4,
     0,     1,     5,     3,     9,     0,     6,    16,     8,     0,
    10,     2,    12,     0,     0,    49,    47,   308,    23,    27,
     0,     0,    60,    83,    51,    17,    18,    19,    40,    44,
     0,    46,    41,    59,    42,    82,    20,    21,    22,     7,
    11,     0,     0,     0,     0,     0,     0,   315,     0,     0,
     0,    45,    58,    81,    50,    48,   309,    24,    28,     0,
     0,    62,    85,    53,     0,     0,     0,   313,   316,     0,
     0,     0,     0,    30,    32,     0,   105,   106,     0,     0,
    61,     0,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
   234,   235,   236,   237,    63,    64,    67,    66,   189,     0,
    65,    90,    84,    86,    87,    89,    88,    52,    57,    54,
    55,    56,     0,     0,     0,   314,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,     0,     0,     0,   244,
   245,   268,     0,   261,   319,   292,   267,   215,   238,   253,
   239,   240,   262,   241,   269,   242,   293,   243,    43,   254,
   252,   193,   318,   194,     0,     0,   247,   195,   248,   196,
     0,   197,   254,   198,   199,   261,   200,     0,   201,     0,
   262,   202,   263,   203,     0,   204,   270,   205,     0,     0,
   287,   206,   288,   207,     0,   208,   294,   209,   210,   211,
     0,     0,   275,   212,   276,   213,     0,     0,   281,   214,
   282,     0,     0,     0,   310,    25,    31,    35,   103,    34,
     0,    33,   298,    37,    36,   302,   304,   190,   317,     0,
   265,     0,   272,     0,   296,     0,   256,     0,     0,     0,
   250,     0,     0,   290,   274,     0,   278,     0,     0,   284,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    68,    69,    70,    71,    72,    73,    74,    76,
    77,    78,    79,    80,    75,   191,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
   230,   231,   232,   233,   234,   235,   236,   237,   192,    91,
    92,    93,    94,    95,    96,    98,    99,   100,   101,   102,
    97,     0,     0,     0,    29,     0,     0,     0,     0,   255,
   257,   264,   266,   271,   273,   295,   297,   259,   246,   249,
   251,     0,   289,   291,   277,   279,   280,   283,   285,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   311,    14,     0,     0,   104,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,     0,     0,
   303,   305,   258,   286,     0,   139,     0,   141,     0,   142,
     0,   145,     0,   146,     0,   149,     0,   150,     0,   153,
     0,   155,     0,   156,     0,   183,     0,   184,     0,   163,
     0,   164,     0,   167,     0,   168,     0,   171,     0,   172,
     0,   175,     0,   176,     0,   179,     0,   180,     0,     0,
     0,     0,     0,   299,     0,   260,   187,   140,   188,   143,
   144,   147,   148,   151,   152,   154,   157,   158,   185,   186,
   165,   166,   169,   170,   173,   174,   177,   178,   181,   182,
     0,    26,    15,    16,     0,   159,     0,   160,     0,   312,
    13,   161,   162,   301,     0,     0,     0
};

static const short yydefgoto[] = {   495,
     2,     3,     5,     7,     8,    11,    12,   450,   451,    13,
    26,    27,    45,    66,   333,    46,    67,   124,   125,   227,
   232,   157,    29,    30,    43,    31,    42,    32,    51,    72,
   120,    33,    34,    49,    70,   105,   106,   222,   283,    35,
    36,    50,    71,   114,   115,   224,   320,   228,   334,   107,
   147,   386,   284,   285,   286,   287,   288,   289,   393,   290,
   291,   292,   293,   294,   295,   458,   108,   109,   459,   158,
   159,   177,   178,   250,   160,   161,   240,   162,   403,   188,
   164,   242,   165,   166,   244,   213,   214,   256,   219,   220,
   259,   201,   202,   253,   167,   168,   246,   234,   336,   337,
   111,   169,    44,    65,   332,   449,    38,    39,   183,   171
};

static const short yypact[] = {    31,
    28,-32768,-32768,-32768,    63,    50,-32768,    90,    94,   101,
-32768,-32768,   333,   162,   169,-32768,-32768,-32768,-32768,-32768,
   103,   161,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   316,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   177,   179,   181,   190,   200,   207,   223,   217,   219,
   225,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   218,
   220,-32768,-32768,-32768,   233,   231,   237,   249,-32768,   405,
   446,   349,   234,-32768,-32768,   246,-32768,-32768,   574,   574,
-32768,    64,    46,   129,   327,   129,   346,   129,   346,   257,
   257,   141,   558,   106,   129,   384,   273,    32,   129,   346,
   129,   390,   129,   392,-32768,-32768,-32768,-32768,-32768,   309,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   314,   348,   386,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   289,   299,   300,-32768,
-32768,-32768,   499,   310,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   257,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   129,   401,-32768,-32768,-32768,-32768,
   401,-32768,-32768,-32768,-32768,-32768,-32768,   257,-32768,    87,
-32768,-32768,-32768,-32768,   510,-32768,-32768,-32768,   129,   401,
-32768,-32768,-32768,-32768,    38,-32768,-32768,-32768,-32768,-32768,
   129,   401,-32768,-32768,-32768,-32768,   129,   401,-32768,-32768,
-32768,   526,   645,   598,-32768,-32768,-32768,-32768,-32768,-32768,
    32,-32768,-32768,-32768,-32768,   338,   340,-32768,-32768,   439,
-32768,   155,-32768,   531,-32768,    93,-32768,   257,   129,   445,
-32768,   129,   479,-32768,-32768,   493,-32768,   129,   511,-32768,
   313,   317,   319,   322,   328,   330,   331,   345,   376,   378,
   379,   396,   400,   402,   403,   428,   429,   430,   431,   440,
   441,   472,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   474,   347,   550,-32768,   574,   574,   478,   483,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   129,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   321,
    73,   100,   104,   111,   117,   185,    55,    98,   229,   170,
    75,   147,   195,    42,    60,   150,   198,   187,   243,   189,
   245,-32768,-32768,   485,   488,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   492,   494,
-32768,-32768,   257,-32768,   668,-32768,   668,-32768,   668,-32768,
   668,-32768,   668,-32768,   668,-32768,   668,-32768,   668,-32768,
   668,-32768,   668,-32768,   668,-32768,   668,-32768,   668,-32768,
   668,-32768,   668,-32768,   668,-32768,   668,-32768,   668,-32768,
   668,-32768,   668,-32768,   668,-32768,   668,-32768,   351,   356,
   542,   312,   204,-32768,   415,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   506,-32768,-32768,-32768,   668,-32768,   668,-32768,   515,-32768,
   333,-32768,-32768,-32768,   420,   435,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    29,
-32768,   -70,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   -13,-32768,-32768,-32768,-32768,-32768,   514,-32768,-32768,
-32768,-32768,   520,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   521,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    45,
   -58,-32768,  -195,  -190,   222,  -189,  -183,  -178,-32768,  -177,
  -172,  -171,  -168,  -167,   334,  -174,   113,-32768,   -32,-32768,
   -74,   -66,   205,-32768,   -72,   -63,-32768,   -80,-32768,   -71,
   -64,-32768,   -89,   -87,-32768,   -68,   178,-32768,   -91,   188,
-32768,   -65,   197,-32768,   -92,   -90,-32768,-32768,-32768,-32768,
   -35,   -12,-32768,-32768,-32768,-32768,-32768,-32768,   -79,   -53
};


#define	YYLAST		724


static const short yytable[] = {    28,
    37,   119,   170,   194,   204,   179,   196,   206,   172,   187,
   163,   216,   193,   180,   197,   184,   203,   174,   207,   189,
   191,   148,   215,   182,   221,   185,   208,   192,   321,   198,
   175,   175,   210,   322,   323,   117,   209,   110,   110,   110,
   324,   199,   199,     1,   433,   325,   326,   211,   211,   217,
   217,   327,   328,   150,   151,   329,   330,   419,   205,   122,
   245,     4,   435,   243,   156,   239,   149,    16,    17,    18,
   156,   150,   151,   152,   156,   407,     6,   427,    16,    17,
    18,   241,    23,     9,   152,   186,   205,    24,   230,   235,
   153,   248,   156,    23,   154,   155,   156,    25,    24,   247,
   421,   195,   409,   173,   155,   243,   411,    10,    25,    16,
    17,    18,   245,   413,   239,   152,   248,   186,   241,   415,
   346,   249,   251,    14,    23,   156,   176,   247,   186,    24,
   173,   155,   195,    15,   173,   155,    47,   181,   387,    25,
   335,   173,   155,   388,   390,   252,   254,   173,   155,   429,
   391,   207,   437,   347,   345,   392,   394,   255,   257,   173,
   155,   395,   396,   258,   260,   397,   398,   190,   229,   233,
   343,   186,   425,    16,    17,    18,   348,   173,   155,   152,
   173,   155,   342,   116,   121,   186,   341,   417,    23,   441,
   319,   445,    40,    24,    48,   349,   351,   431,   352,   354,
   439,    41,   356,    25,   357,   359,   487,    16,    17,    18,
    55,   181,    56,   152,    57,   173,   155,   173,   155,   173,
   155,   200,    23,    58,   181,   173,   155,    24,   173,   155,
   195,   423,   460,    59,   461,    60,   462,    25,   463,    61,
   464,    62,   465,    63,   466,   443,   467,   447,   468,    64,
   469,    68,   470,    69,   471,   190,   472,    74,   473,   186,
   474,    73,   475,    75,   476,    76,   477,   123,   478,   212,
   479,   218,   480,   173,   155,   173,   155,   399,   400,   126,
   426,   434,   179,   428,   436,   406,   420,   186,   446,   193,
   412,   197,   416,   203,   408,   207,   422,   191,   404,   215,
   414,   221,   418,   438,   424,   156,   430,   175,   175,   442,
   492,   223,   493,   440,   485,    16,    17,    18,   199,   199,
   225,   152,   236,   405,   211,   211,   217,   217,   150,   151,
    23,   456,   237,   238,    23,    24,    16,    17,    18,    24,
   338,  -318,   339,    19,    20,    25,   360,    21,    22,    25,
   361,    23,   362,   176,    18,   363,    24,   173,   155,    19,
    20,   364,   486,   365,   366,   488,    25,    77,    78,    79,
    80,   383,   181,   197,   118,   226,   173,   155,   367,   481,
   483,   482,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,    77,    78,    79,    80,   368,
   200,   369,   370,   231,   173,   155,   212,   489,   218,   496,
   173,   155,   173,   155,    77,    78,    79,    80,   239,   371,
    81,   173,   155,   372,   497,   373,   374,   484,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   375,   376,   377,   378,   112,   340,    79,    80,   173,
   155,   113,   350,   379,   380,   173,   155,    28,    37,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    16,    17,    18,   381,   353,   382,   152,   173,
   155,   401,   491,    16,    17,    18,   402,    23,   452,   152,
   355,   453,    24,   173,   155,   454,   239,   455,    23,   154,
   155,   156,    25,    24,    16,    17,    18,   239,   358,   490,
   152,   173,   155,    25,    52,    16,    17,    18,   494,    23,
    53,    54,    19,    20,    24,   389,   444,   331,   344,     0,
    23,    16,    17,    18,    25,    24,   410,   152,   448,   432,
     0,     0,     0,     0,     0,    25,    23,     0,     0,     0,
     0,    24,   261,     0,   262,   263,   264,   265,   266,   267,
   268,    25,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   261,     0,   262,   263,
   264,   265,   266,   267,   268,     0,   269,   270,   384,   385,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   127,     0,   128,   129,     0,     0,   130,   131,   132,     0,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   261,     0,   262,   263,     0,     0,
   266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   282,   296,   297,
   298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   457,   297,   298,   299,   300,   301,   302,   303,   304,
   305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318
};

static const short yycheck[] = {    13,
    13,    72,    82,    93,    97,    85,    94,    98,    83,    90,
    82,   103,    92,    86,    94,    88,    96,    84,    98,    91,
    92,    80,   102,    87,   104,    89,    99,    92,   224,    95,
    84,    85,   101,   224,   224,    71,   100,    70,    71,    72,
   224,    95,    96,    13,     3,   224,   224,   101,   102,   103,
   104,   224,   224,     8,     9,   224,   224,     3,    27,    72,
   153,    34,     3,   153,    33,    28,     3,     4,     5,     6,
    33,     8,     9,    10,    33,     3,    14,     3,     4,     5,
     6,   153,    19,    34,    10,    31,    27,    24,   124,   125,
    27,   163,    33,    19,    31,    32,    33,    34,    24,   153,
     3,    27,     3,    31,    32,   195,     3,    18,    34,     4,
     5,     6,   205,     3,    28,    10,   188,    31,   190,     3,
    28,   175,   176,    30,    19,    33,    27,   181,    31,    24,
    31,    32,    27,    33,    31,    32,    34,    27,   334,    34,
   231,    31,    32,   334,   334,   199,   200,    31,    32,     3,
   334,   231,     3,   246,   244,   334,   334,   211,   212,    31,
    32,   334,   334,   217,   218,   334,   334,    27,   124,   125,
   242,    31,     3,     4,     5,     6,   248,    31,    32,    10,
    31,    32,    28,    71,    72,    31,   240,     3,    19,     3,
   223,     3,    31,    24,    34,   249,   250,     3,   252,   253,
     3,    33,   256,    34,   258,   259,     3,     4,     5,     6,
    34,    27,    34,    10,    34,    31,    32,    31,    32,    31,
    32,    27,    19,    34,    27,    31,    32,    24,    31,    32,
    27,     3,   407,    34,   409,    29,   411,    34,   413,    17,
   415,    25,   417,    25,   419,     3,   421,     3,   423,    25,
   425,    34,   427,    34,   429,    27,   431,    27,   433,    31,
   435,    29,   437,    27,   439,    17,   441,    34,   443,    27,
   445,    27,   447,    31,    32,    31,    32,   336,   337,    34,
   370,   374,   362,   371,   375,   360,   367,    31,   380,   369,
   363,   371,   365,   373,   361,   375,   368,   369,   352,   379,
   364,   381,   366,   376,   369,    33,   372,   361,   362,   378,
   485,     3,   487,   377,     3,     4,     5,     6,   372,   373,
     7,    10,    34,     3,   378,   379,   380,   381,     8,     9,
    19,   403,    34,    34,    19,    24,     4,     5,     6,    24,
     3,    32,     3,    11,    12,    34,    34,    15,    16,    34,
    34,    19,    34,    27,     6,    34,    24,    31,    32,    11,
    12,    34,   452,    34,    34,   453,    34,    20,    21,    22,
    23,    25,    27,   453,    26,    28,    31,    32,    34,    29,
   451,    26,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    20,    21,    22,    23,    34,
    27,    34,    34,    28,    31,    32,    27,     3,    27,     0,
    31,    32,    31,    32,    20,    21,    22,    23,    28,    34,
    26,    31,    32,    34,     0,    34,    34,   451,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    34,    34,    34,    34,    20,    28,    22,    23,    31,
    32,    26,    28,    34,    34,    31,    32,   491,   491,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,     4,     5,     6,    34,    28,    34,    10,    31,
    32,    34,   484,     4,     5,     6,    34,    19,    34,    10,
    28,    34,    24,    31,    32,    34,    28,    34,    19,    31,
    32,    33,    34,    24,     4,     5,     6,    28,    28,    34,
    10,    31,    32,    34,    31,     4,     5,     6,    34,    19,
    31,    31,    11,    12,    24,   334,   379,   224,    28,    -1,
    19,     4,     5,     6,    34,    24,   362,    10,   381,   373,
    -1,    -1,    -1,    -1,    -1,    34,    19,    -1,    -1,    -1,
    -1,    24,    57,    -1,    59,    60,    61,    62,    63,    64,
    65,    34,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    57,    -1,    59,    60,
    61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    57,    -1,    59,    60,    -1,    -1,    63,    64,    65,    -1,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    57,    -1,    59,    60,    -1,    -1,
    63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */


/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 11:
{ AddMetaData(yyvsp[-1].strVal, yyvsp[0].strVal); ;
    break;}
case 23:
{
	;
    break;}
case 24:
{
		// id is $3
		BeginProtoDeclaration(yyvsp[0].strVal);
	;
    break;}
case 25:
{
	;
    break;}
case 26:
{
		EndProtoDeclaration();
	;
    break;}
case 27:
{
	;
    break;}
case 28:
{
		// id is $3
		BeginProtoDeclaration(yyvsp[0].strVal, TRUE);
	;
    break;}
case 29:
{
		EndProtoDeclaration(StringArrayFromStrings());
	;
    break;}
case 47:
{
	;
    break;}
case 48:
{
		UseNode(yyvsp[0].strVal);
	;
    break;}
case 49:
{
	;
    break;}
case 50:
{
		DefNode(yyvsp[0].strVal);
	;
    break;}
case 51:
{
		BeginMakeNode(yyvsp[0].strVal);
	;
    break;}
case 52:
{
		EndMakeNode();
	;
    break;}
case 60:
{
		BeginMakeScript();
	;
    break;}
case 61:
{
		EndMakeScript();
	;
    break;}
case 67:
{
		SetFieldAccess(yyvsp[0].memberType);
	;
    break;}
case 83:
{
		BeginMakeShader();
	;
    break;}
case 84:
{
		EndMakeShader();
	;
    break;}
case 90:
{
		SetFieldAccess(eAnmValueMember);
	;
    break;}
case 103:
{
		SetFieldAccess(yyvsp[0].memberType);
	;
    break;}
case 104:
{
	;
    break;}
case 105:
{ yyval.memberType = eAnmInitMember; ;
    break;}
case 106:
{ yyval.memberType = eAnmValueMember; ;
    break;}
case 107:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 108:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 109:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 110:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 111:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 112:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 113:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 114:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 115:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 116:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 117:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 118:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 119:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 120:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 121:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 122:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 123:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 124:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 125:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 126:
{yyval.attrType = yyvsp[0].attrType;;
    break;}
case 139:
{
		AddField(eValueBoolean, yyvsp[-1].strVal, (void*) GetCurrentBool());
	;
    break;}
case 140:
{
		AddField(eValueBoolean, yyvsp[-2].strVal, (void*) GetCurrentBool(), yyvsp[0].strVal);
	;
    break;}
case 141:
{
		AddField(eValueColor, yyvsp[-1].strVal, (void*) ColorFromFloats());
	;
    break;}
case 142:
{
		AddField(eValueColorArray, yyvsp[-1].strVal, (void*) ColorArrayFromFloats());
	;
    break;}
case 143:
{
		AddField(eValueColor, yyvsp[-2].strVal, (void*) ColorFromFloats(), yyvsp[0].strVal);
	;
    break;}
case 144:
{
		AddField(eValueColorArray, yyvsp[-2].strVal, (void*) ColorArrayFromFloats(), yyvsp[0].strVal);
	;
    break;}
case 145:
{
		AddField(eValueDouble, yyvsp[-1].strVal, (void*) DoubleFromFloats());
	;
    break;}
case 146:
{
		AddField(eValueDoubleArray, yyvsp[-1].strVal, (void*) DoubleArrayFromFloats());
	;
    break;}
case 147:
{
		AddField(eValueDouble, yyvsp[-2].strVal, (void*) DoubleFromFloats(), yyvsp[0].strVal);
	;
    break;}
case 148:
{
		AddField(eValueDoubleArray, yyvsp[-2].strVal, (void*) DoubleArrayFromFloats(), yyvsp[0].strVal);
	;
    break;}
case 149:
{
		AddField(eValueFloat, yyvsp[-1].strVal, (void*) FloatFromFloats());
	;
    break;}
case 150:
{
		AddField(eValueFloatArray, yyvsp[-1].strVal, (void*) FloatArrayFromFloats());
	;
    break;}
case 151:
{
		AddField(eValueFloat, yyvsp[-2].strVal, (void*) FloatFromFloats(), yyvsp[0].strVal);
	;
    break;}
case 152:
{
		AddField(eValueFloatArray, yyvsp[-2].strVal, (void*) FloatArrayFromFloats(), yyvsp[0].strVal);
	;
    break;}
case 153:
{
		AddField(eValueImage, yyvsp[-1].strVal, (void*) ImageFromInts());
	;
    break;}
case 154:
{
		AddField(eValueImage, yyvsp[-2].strVal, (void*) ImageFromInts(), yyvsp[0].strVal);
	;
    break;}
case 155:
{
		AddField(eValueInteger, yyvsp[-1].strVal, (void*) IntegerFromInts());
	;
    break;}
case 156:
{
		AddField(eValueIntegerArray, yyvsp[-1].strVal, (void*) IntegerArrayFromInts());
	;
    break;}
case 157:
{
		AddField(eValueInteger, yyvsp[-2].strVal, (void*) IntegerFromInts(), yyvsp[0].strVal);
	;
    break;}
case 158:
{
		AddField(eValueIntegerArray, yyvsp[-2].strVal, (void*) IntegerArrayFromInts(), yyvsp[0].strVal);
	;
    break;}
case 159:
{
		AddField(eValueNode, yyvsp[-1].strVal, NULL);
	;
    break;}
case 160:
{
		AddField(eValueNodeArray, yyvsp[-1].strVal, NULL);
	;
    break;}
case 161:
{
		AddField(eValueNode, yyvsp[-2].strVal, NULL, yyvsp[0].strVal);
	;
    break;}
case 162:
{
		AddField(eValueNodeArray, yyvsp[-2].strVal, NULL, yyvsp[0].strVal);
	;
    break;}
case 163:
{
		AddField(eValueRotation, yyvsp[-1].strVal, (void*) RotationFromFloats());
	;
    break;}
case 164:
{
		AddField(eValueRotationArray, yyvsp[-1].strVal, (void*) RotationArrayFromFloats());
	;
    break;}
case 165:
{
		AddField(eValueRotation, yyvsp[-2].strVal, (void*) RotationFromFloats(), yyvsp[0].strVal);
	;
    break;}
case 166:
{
		AddField(eValueRotationArray, yyvsp[-2].strVal, (void*) RotationArrayFromFloats(), yyvsp[0].strVal);
	;
    break;}
case 167:
{
		AddField(eValueString, yyvsp[-1].strVal, (void*) StringFromStrings());
	;
    break;}
case 168:
{
		AddField(eValueStringArray, yyvsp[-1].strVal, (void*) StringArrayFromStrings());
	;
    break;}
case 169:
{
		AddField(eValueString, yyvsp[-2].strVal, (void*) StringFromStrings(), yyvsp[0].strVal);
	;
    break;}
case 170:
{
		AddField(eValueStringArray, yyvsp[-2].strVal, (void*) StringArrayFromStrings(), yyvsp[0].strVal);
	;
    break;}
case 171:
{
		AddField(eValueTime, yyvsp[-1].strVal, (void*) TimeFromFloats());
	;
    break;}
case 172:
{
		AddField(eValueTimeArray, yyvsp[-1].strVal, (void*) TimeArrayFromFloats());
	;
    break;}
case 173:
{
		AddField(eValueTime, yyvsp[-2].strVal, (void*) TimeFromFloats(), yyvsp[0].strVal);
	;
    break;}
case 174:
{
		AddField(eValueTimeArray, yyvsp[-2].strVal, (void*) TimeArrayFromFloats(), yyvsp[0].strVal);
	;
    break;}
case 175:
{
		AddField(eValuePoint2, yyvsp[-1].strVal, (void*) Point2FromFloats());
	;
    break;}
case 176:
{
		AddField(eValuePoint2Array, yyvsp[-1].strVal, (void*) Point2ArrayFromFloats());
	;
    break;}
case 177:
{
		AddField(eValuePoint2, yyvsp[-2].strVal, (void*) Point2FromFloats(), yyvsp[0].strVal);
	;
    break;}
case 178:
{
		AddField(eValuePoint2Array, yyvsp[-2].strVal, (void*) Point2ArrayFromFloats(), yyvsp[0].strVal);
	;
    break;}
case 179:
{
		AddField(eValuePoint3, yyvsp[-1].strVal, (void*) Point3FromFloats());
	;
    break;}
case 180:
{
		AddField(eValuePoint3Array, yyvsp[-1].strVal, (void*) Point3ArrayFromFloats());
	;
    break;}
case 181:
{
		AddField(eValuePoint3, yyvsp[-2].strVal, (void*) Point3FromFloats(), yyvsp[0].strVal);
	;
    break;}
case 182:
{
		AddField(eValuePoint3Array, yyvsp[-2].strVal, (void*) Point3ArrayFromFloats(), yyvsp[0].strVal);
	;
    break;}
case 183:
{
		AddField(eValueNode, yyvsp[-1].strVal, NULL);
	;
    break;}
case 184:
{
		AddField(eValueNodeArray, yyvsp[-1].strVal, NULL);
	;
    break;}
case 185:
{
		AddField(eValueNode, yyvsp[-2].strVal, NULL, yyvsp[0].strVal);
	;
    break;}
case 186:
{
		AddField(eValueNodeArray, yyvsp[-2].strVal, NULL, yyvsp[0].strVal);
	;
    break;}
case 187:
{
		yyval.strVal = yyvsp[0].strVal;
	;
    break;}
case 188:
{
		yyval.strVal = yyvsp[0].pAttrSymbol->GetName()->Clone();
	;
    break;}
case 190:
{
		AddIS(yyvsp[-2].strVal, yyvsp[0].strVal);
	;
    break;}
case 191:
{
		AddIS(yyvsp[-2].pAttrSymbol, yyvsp[0].strVal);
	;
    break;}
case 192:
{
		AddIS(yyvsp[-2].pAttrSymbol, yyvsp[0].pAttrSymbol);
	;
    break;}
case 193:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) GetCurrentBool());
	;
    break;}
case 194:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) ColorFromFloats());
	;
    break;}
case 195:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) ColorArrayFromFloats());
	;
    break;}
case 196:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) DoubleFromFloats());
	;
    break;}
case 197:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) DoubleArrayFromFloats());
	;
    break;}
case 198:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) FloatFromFloats());
	;
    break;}
case 199:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) FloatArrayFromFloats());
	;
    break;}
case 200:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) ImageFromInts());
	;
    break;}
case 201:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) IntegerFromInts());
	;
    break;}
case 202:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) IntegerArrayFromInts());
	;
    break;}
case 203:
{
		SetValue(yyvsp[-1].pAttrSymbol, NULL);
	;
    break;}
case 204:
{
		SetValue(yyvsp[-1].pAttrSymbol, NULL);
	;
    break;}
case 205:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) RotationFromFloats());
	;
    break;}
case 206:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) RotationArrayFromFloats());
	;
    break;}
case 207:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) StringFromStrings());
	;
    break;}
case 208:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) StringArrayFromStrings());
	;
    break;}
case 209:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) TimeFromFloats());
	;
    break;}
case 210:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) TimeArrayFromFloats());
	;
    break;}
case 211:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) Point2FromFloats());
	;
    break;}
case 212:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) Point2ArrayFromFloats());
	;
    break;}
case 213:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) Point3FromFloats());
	;
    break;}
case 214:
{
		SetValue(yyvsp[-1].pAttrSymbol, (void*) Point3ArrayFromFloats());
	;
    break;}
case 215:
{
		IgnoreValue(yyvsp[-1].strVal, yyvsp[0].attrType);
	;
    break;}
case 216:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 217:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 218:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 219:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 220:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 221:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 222:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 223:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 224:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 225:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 226:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 227:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 228:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 229:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 230:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 231:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 232:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 233:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 234:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 235:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 236:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 237:
{yyval.pAttrSymbol = yyvsp[0].pAttrSymbol; ;
    break;}
case 238:
{yyval.attrType = eValueBoolean; ;
    break;}
case 239:
{yyval.attrType = eValueFloatArray; ;
    break;}
case 240:
{yyval.attrType = eValueImage; ;
    break;}
case 241:
{yyval.attrType = eValueIntegerArray; ;
    break;}
case 242:
{yyval.attrType = eValueNodeArray; ;
    break;}
case 243:
{yyval.attrType = eValueStringArray; ;
    break;}
case 244:
{
		SetCurrentBool(TRUE);
		yyval.intVal = TRUE;
	;
    break;}
case 245:
{
		SetCurrentBool(FALSE);
		yyval.intVal = FALSE;
	;
    break;}
case 246:
{
		AccumDouble(yyvsp[-2].doubleVal);
		AccumDouble(yyvsp[-1].doubleVal);
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 250:
{
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 251:
{
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 252:
{
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 256:
{
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 257:
{
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 261:
{
		AccumInteger(yyvsp[0].intVal);
	;
    break;}
case 267:
{
		yyval = yyvsp[0];
	;
    break;}
case 268:
{
		NullNode();
	;
    break;}
case 274:
{
		AccumDouble(yyvsp[-1].doubleVal);
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 278:
{
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 279:
{
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 280:
{
		AccumDouble(yyvsp[-2].doubleVal);
		AccumDouble(yyvsp[-1].doubleVal);
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 284:
{
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 285:
{
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 286:
{
		AccumDouble(yyvsp[-3].doubleVal);
		AccumDouble(yyvsp[-2].doubleVal);
		AccumDouble(yyvsp[-1].doubleVal);
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 290:
{
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 291:
{
		AccumDouble(yyvsp[0].doubleVal);
	;
    break;}
case 292:
{
		AccumString(yyvsp[0].strVal);
	;
    break;}
case 298:
{
		SetFieldAccess(yyvsp[0].memberType);
	;
    break;}
case 299:
{
		AddField(yyvsp[-1].attrType, yyvsp[0].strVal);
	;
    break;}
case 300:
{
		SetFieldAccess(yyvsp[0].memberType);
	;
    break;}
case 301:
{
		AddISField(yyvsp[-3].attrType, yyvsp[-2].strVal, yyvsp[0].strVal);
	;
    break;}
case 302:
{
		AddEventIn(yyvsp[-1].attrType, yyvsp[0].strVal);
	;
    break;}
case 303:
{
		AddISEventIn(yyvsp[-3].attrType, yyvsp[-2].strVal, yyvsp[0].strVal);
	;
    break;}
case 304:
{
		AddEventOut(yyvsp[-1].attrType, yyvsp[0].strVal);
	;
    break;}
case 305:
{
		AddISEventOut(yyvsp[-3].attrType, yyvsp[-2].strVal, yyvsp[0].strVal);
	;
    break;}
case 308:
{
	;
    break;}
case 309:
{
	;
    break;}
case 310:
{
	;
    break;}
case 311:
{
	;
    break;}
case 312:
{
		MakeRoute(yyvsp[-9].strVal, yyvsp[-6].strVal, yyvsp[-3].strVal, yyvsp[0].strVal);
	;
    break;}
case 318:
{ yyval.doubleVal = yyvsp[0].intVal; ;
    break;}
case 319:
{ yyval.doubleVal = yyvsp[0].doubleVal; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}


